{"version":3,"sources":["Meme/styles.module.css","MemeGenerated/styles.module.css","Meme/Meme.js","MemeGenerated/MemeGenerated.js","App/App.js","index.js"],"names":["module","exports","Meme","useState","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","array","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","className","styles","container","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","push","url","console","log","generate","skip","map","onChange","e","text","target","value","updateCaption","alt","src","MemeGenerated","copied","setCopied","clipboard","useClipboard","location","useLocation","URLSearchParams","search","get","home","copy","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5fd3e729.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1j76y\",\"skip\":\"styles_skip__J5imd\",\"generate\":\"styles_generate__10Fnw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__38Ztw\",\"copy\":\"styles_copy__IKXB0\",\"home\":\"styles_home__2P03Q\"};","\n\nimport React, { useEffect, useState } from 'react';\nimport styles from './styles.module.css';\nimport { useHistory } from 'react-router-dom';\n\n\nexport const Meme = () => {\n    const [memes, setMemes] = useState([]);\n    const [memeIndex, setMemeIndex] = useState(0);\n    const [captions, setCaptions] = useState([]);\n\n    const history = useHistory();\n\n    const updateCaption = (e, index) => {\n        const text = e.target.value || '';\n        setCaptions(\n        captions.map((c, i) => {\n            if(index === i) {\n            return text;\n            } else {\n            return c;\n            }\n        })\n        );\n    };\n    const generateMeme = () => {\n        const currentMeme = memes[memeIndex];\n        const formData = new FormData();\n\n        formData.append('username', 'imgflip123_isthepass');\n        formData.append('password', 'imgflip123');\n        formData.append('template_id', currentMeme.id);\n        captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\n\n        fetch('https://api.imgflip.com/caption_image', {\n        method: 'POST',\n        body: formData\n        }).then(res => {\n            res.json().then(res => {\n                history.push(`/generated?url=${res.data.url}`);\n                console.log(res)\n        });\n        });\n    };\n    \n    \n    const shuffleMemes = (array) => {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i);\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    };\n    \n    useEffect(() => {\n        fetch('https://api.imgflip.com/get_memes').then(res => {\n            res.json().then(res => {\n            const _memes = res.data.memes;\n            shuffleMemes(_memes);\n            setMemes(_memes);\n        });\n    });\n}, []);\n\n  useEffect(() => {\n    if(memes.length) {\n      setCaptions(Array(memes[memeIndex].box_count).fill(''));\n    }\n  }, [memeIndex, memes]);\n\n  return(\n    memes.length ? \n    <div className={styles.container}>\n      <button onClick={generateMeme} className={styles.generate}>Generate</button>\n      <button onClick={() => setMemeIndex(memeIndex + 1)} className={styles.skip}>Skip</button>\n      {\n        captions.map((c, index) => (\n          <input onChange={(e) => updateCaption(e, index)} key={index} />\n        ))\n      }\n      <img alt='generated_meme' src={memes[memeIndex].url} />\n    </div> : \n    <></>\n  );\n};","\n\nimport React, { useState } from 'react';\nimport styles from './styles.module.css';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useClipboard } from 'use-clipboard-copy';\n\nexport const MemeGenerated = () => {\n\n  const [copied, setCopied] = useState(false);\n\n  const clipboard = useClipboard();\n  const history = useHistory();\n  const location = useLocation();\n  const url = new URLSearchParams(location.search).get('url');\n\n  const copyLink = () => {\n    clipboard.copy(url);\n    setCopied(true);\n  };\n\n  return(\n    <div className={styles.container}>\n\n      <button onClick={() => history.push('/')} className={styles.home}>\n        Make More Memes\n      </button>\n\n\n      { url && <img alt='generated_meme' src={url} /> }\n\n      <button onClick={copyLink} className={styles.copy}>\n        {copied ? 'Link copied!' : 'Copy link?'}\n      </button>\n    </div>\n  );\n};","\nimport React from 'react';\nimport { Meme } from '../Meme/Meme';\nimport { Switch, Route } from 'react-router-dom';\nimport { MemeGenerated } from '../MemeGenerated/MemeGenerated';\n// import styles from './styles.module.css';\n\nexport const App = () => {\n  return (\n    <div>\n\n      <h1>Meme Maker</h1>\n      <Switch>\n        <Route exact path='/'>\n          <Meme />\n        </Route>\n        <Route path='/generated'>\n          <MemeGenerated />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\n","\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from './App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}